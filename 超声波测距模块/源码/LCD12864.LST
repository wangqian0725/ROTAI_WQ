C51 COMPILER V7.10   LCD12864                                                              04/15/2016 21:28:15 PAGE 1   


C51 COMPILER V7.10, COMPILATION OF MODULE LCD12864
OBJECT MODULE PLACED IN LCD12864.OBJ
COMPILER INVOKED BY: d:\program files\Keil\C51\BIN\C51.EXE LCD12864.c BROWSE DEBUG OBJECTEXTEND

line level    source

   1          #include "LCD12864.h"
   2          #include "coon.h"
   3          #include <reg52.h>
   4          #include <intrins.h>
   5          
   6          #define DATA_LCD12864  P0    //数据口
   7          
   8          sbit RS_LCD12864  =  P2^7;      //片选
   9          sbit RW_LCD12864  =  P2^6;      //液晶读/写控制
  10          sbit EN_LCD12864  =  P2^5;      //液晶使能控制
  11          
  12          /*********************************************************************
  13           原型: bit busy_LCD12864()
  14           功能: 检测液晶是否空闲
  15          *********************************************************************/
  16          bit busy_LCD12864()
  17          {
  18   1              bit result;
  19   1      
  20   1              RS_LCD12864 = 0;
  21   1              RW_LCD12864 = 1;
  22   1              EN_LCD12864 = 1;
  23   1              delay_5us();
  24   1              result = (bit)(DATA_LCD12864&0x80);
  25   1              EN_LCD12864 = 0;
  26   1              return(result);
  27   1      }
  28          
  29          /*********************************************************************
  30           原型: void cmd_LCD12864(uchar pCmd, uint pMs)
  31           功能: 向LCD发送指令, EN高脉冲发送
  32           参数: pCmd   需要发送的指令字
  33                 pMs    发送指令后等待的毫秒数
  34          *********************************************************************/
  35          void cmd_LCD12864(uchar pCmd, uint pMs)
  36          {
  37   1              while(busy_LCD12864());
  38   1              RS_LCD12864 = 0;
  39   1              RW_LCD12864 = 0;
  40   1      
  41   1              EN_LCD12864 = 0;
  42   1              _nop_(); _nop_();
  43   1              DATA_LCD12864 = pCmd;
  44   1              _nop_(); _nop_();
  45   1              EN_LCD12864 = 1;
  46   1              _nop_(); _nop_();
  47   1              EN_LCD12864 = 0;
  48   1      
  49   1              delay_ms(pMs);
  50   1      }
  51          
  52          /*********************************************************************
  53           原型: void data_LCD12864(uchar pData, uint pMs)
  54           功能: 向LCD发送数据, EN高脉冲发送
  55           参数: pData   需要发送的数据
C51 COMPILER V7.10   LCD12864                                                              04/15/2016 21:28:15 PAGE 2   

  56                 pMs     发送数据后等待的毫秒数
  57          *********************************************************************/
  58          void data_LCD12864(uchar pData, uint pMs)
  59          {
  60   1              while(busy_LCD12864());
  61   1              RS_LCD12864 = 1;
  62   1              RW_LCD12864 = 0;
  63   1      
  64   1              EN_LCD12864 = 0;
  65   1              DATA_LCD12864 = pData;
  66   1              _nop_(); _nop_();
  67   1              EN_LCD12864 = 1;
  68   1              _nop_(); _nop_();
  69   1              EN_LCD12864 = 0;
  70   1      
  71   1              delay_ms(pMs);
  72   1      }
  73          
  74          /*********************************************************************
  75           原型: void init_LCD()
  76           功能: 液晶初始化
  77          *********************************************************************/
  78          void init_LCD()
  79          {
  80   1          //cmd_LCD12864(0x34, 1);      //扩充指令操作
  81   1          cmd_LCD12864(0x30, 1);      //基本指令操作
  82   1          cmd_LCD12864(0x01, 1);      //清除LCD的显示内容
  83   1              cmd_LCD12864(0x0C, 1);      //显示开,关光标
  84   1      }
  85          
  86          /*********************************************************************
  87           原型: void pos_LCD(uchar x, uchar y)
  88           功能: 设置显示位置
  89           参数: x    横向坐标
  90                 y    纵向坐标
  91          *********************************************************************/
  92          void pos_LCD(uchar x, uchar y)
  93          {
  94   1              if     (x == 0)     { x = 0x80; }
  95   1              else if(x == 1)     { x = 0x90; }
  96   1              else if(x == 2)     { x = 0x88; }
  97   1              else if(x == 3)     { x = 0x98; }
  98   1      
  99   1              cmd_LCD12864(x+y, 0);     //显示地址
 100   1      }
 101          
 102          /*********************************************************************
 103           原型: void show_str_LCD(uchar *pStr, uchar pLine, uchar pIdx)
 104           功能: 在指定位置开始显示指定字符串
 105           参数: pLine    行
 106                 pIdx     列
 107          *********************************************************************/
 108          void show_str_LCD(uchar *pStr, uchar pLine, uchar pIdx)
 109          {
 110   1              pos_LCD(pLine, pIdx);
 111   1      
 112   1              while(*pStr != 0)
 113   1              {
 114   2                      data_LCD12864(*pStr, 1);
 115   2                      pStr++;
 116   2              }
 117   1      }
C51 COMPILER V7.10   LCD12864                                                              04/15/2016 21:28:15 PAGE 3   

 118          
 119          /*********************************************************************
 120           原型: void cls_LCD()
 121           功能: 清屏
 122          *********************************************************************/
 123          #ifdef NEED_CLS_LCD12864
              void cls_LCD()
              {
                      //cmd_LCD12864(0x34, 1);      //扩充指令操作
                      cmd_LCD12864(0x30, 1);      //基本指令操作
                      cmd_LCD12864(0x01, 1);      //清屏
              }
              #endif
 131          
 132          /*********************************************************************
 133           原型: void cursor_LCD(bit pFlag)
 134           功能: 打开/关闭光标, pFlag=1打开光标, 0关闭光标
 135          *********************************************************************/
 136          #ifdef NEED_CURSOR_LCD12864
              void cursor_LCD(bit pFlag)
              {
                  cmd_LCD12864(0x30, 1);      //基本指令操作
                      if( pFlag == 0 )
                              cmd_LCD12864(0x0C, 1);      //显示开,关光标
                      else
                              cmd_LCD12864(0x0F, 1);      //显示开,开光标
              }
              #endif
 146          
 147          /*********************************************************************
 148           原型: void flicker_LCD(uint pMs)
 149           功能: 全屏闪烁
 150           参数: pMs  闪烁间隔的毫秒数
 151          *********************************************************************/
 152          #ifdef NEED_FLICKER_LCD12864
              void flicker_LCD(uint pMs)
              {
                 cmd_LCD12864(0x08, pMs);
                 cmd_LCD12864(0x0c, pMs);
                 cmd_LCD12864(0x08, pMs);
                 cmd_LCD12864(0x0c, pMs);
              }
              #endif
 161          
 162          /*********************************************************************
 163           原型: void image_LCD(uchar *pBmp)
 164           功能: 在指定位置开始显示指定字符串
 165           参数: x    横向坐标
 166                 y    纵向坐标
 167          *********************************************************************/
 168          #ifdef NEED_IMAGE_LCD12864
              /*void image_LCD(uchar *pBmp)
              {
                      uchar i=0, j=0;
              
                      cmd_LCD12864(0x34, 0);        //扩充指令
              
                      for(i=0; i<32; i++)
                      {
                              cmd_LCD12864(0x80+i, 0);    //先写入水平坐标值
                              cmd_LCD12864(0x80, 0);      //写入垂直坐标值
                              for(j=0; j<16; j++)            //再写入两个8位元的数据
C51 COMPILER V7.10   LCD12864                                                              04/15/2016 21:28:15 PAGE 4   

                                      data_LCD12864(*pBmp++, 0);
                      }
              
                      for(i=0; i<32; i++)
                      {
                              cmd_LCD12864(0x80+i, 0);
                              cmd_LCD12864(0x88, 0);
                              for(j=0; j<16; j++)
                                      data_LCD12864(*pBmp++, 0);
                      }
                      cmd_LCD12864(0x36, 1);       //写完数据,开图形显示
              }*/
              void image_LCD(uint x, uint y, uint w, uint h, uchar *pBmp)
              {
                      uchar i=0, j=0;
                      uchar y1=0, y2=0;
              
                      cmd_LCD12864(0x34, 0);        //扩充指令
              
                      //上半屏
                      if( y<32 )  //需要在上半屏显示
                      {
                              y1 = y;
                              if( (y+h)<32 )
                                      y2 = y + h;
                              else
                                      y2 = 32;
                              for(i=y1; i<y2; i++)
                              {
                                      cmd_LCD12864(0x80+i, 0);         //先写水平坐标值
                                      cmd_LCD12864(0x80+(x/8), 0);     //再写垂直坐标值
                                      for(j=0; j<(w/8); j++)            //写入数据
                                              data_LCD12864(*pBmp++, 0);
                              }
                      }
              
                      //下半屏
                      if( 32<=(y+h) )  //需要在下半屏显示
                      {
                              if( y < 32 )
                              {
                                      y1 = 0;
                              }
                              else
                              {
                                      y1 = y - 32;
                              }
                              y2 = y + h - 32;
                              for(i=y1; i<y2; i++)
                              {
                                      cmd_LCD12864(0x80+i, 0);
                                      cmd_LCD12864(0x88+(x/8), 0);
                                      for(j=0; j<(w/8); j++)
                                              data_LCD12864(*pBmp++, 0);
                              }
                      }
              
                      cmd_LCD12864(0x36, 1);       //写完数据,开图形显示
              }
              #endif


C51 COMPILER V7.10   LCD12864                                                              04/15/2016 21:28:15 PAGE 5   

MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    199    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      11
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----       1
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
